// Mocks generated by Mockito 5.1.0 from annotations
// in weather_app/test/features/home/presentation/state/cubit/weather_cubit_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i6;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:weather_app/core/use_cases/use_case.dart' as _i9;
import 'package:weather_app/domain/failure/failure.dart' as _i7;
import 'package:weather_app/features/home/domain/entities/hour_forecast_entity.dart'
    as _i10;
import 'package:weather_app/features/home/domain/entities/weather_data_entity.dart'
    as _i8;
import 'package:weather_app/features/home/domain/entities/weather_entity.dart'
    as _i4;
import 'package:weather_app/features/home/domain/repositories/weather_repository.dart'
    as _i2;
import 'package:weather_app/features/home/domain/use_cases/get_weather_data_use_case.dart'
    as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeWeatherRepository_0 extends _i1.Fake
    implements _i2.WeatherRepository {}

class _FakeEither_1<L, R> extends _i1.Fake implements _i3.Either<L, R> {}

class _FakeWeatherEntity_2 extends _i1.Fake implements _i4.WeatherEntity {}

/// A class which mocks [GetWeatherDataUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetWeatherDataUseCase extends _i1.Mock
    implements _i5.GetWeatherDataUseCase {
  MockGetWeatherDataUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.WeatherRepository get weatherRepository =>
      (super.noSuchMethod(Invocation.getter(#weatherRepository),
          returnValue: _FakeWeatherRepository_0()) as _i2.WeatherRepository);
  @override
  _i6.Future<_i3.Either<_i7.Failure, _i8.WeatherDataEntity>> call(
          _i9.NoParams? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
              returnValue:
                  Future<_i3.Either<_i7.Failure, _i8.WeatherDataEntity>>.value(
                      _FakeEither_1<_i7.Failure, _i8.WeatherDataEntity>()))
          as _i6.Future<_i3.Either<_i7.Failure, _i8.WeatherDataEntity>>);
}

/// A class which mocks [WeatherDataEntity].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockWeatherDataEntity extends _i1.Mock implements _i8.WeatherDataEntity {
  MockWeatherDataEntity() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.WeatherEntity get weatherEntity =>
      (super.noSuchMethod(Invocation.getter(#weatherEntity),
          returnValue: _FakeWeatherEntity_2()) as _i4.WeatherEntity);
  @override
  List<_i10.HourForecastEntity> get todayWeather =>
      (super.noSuchMethod(Invocation.getter(#todayWeather),
              returnValue: <_i10.HourForecastEntity>[])
          as List<_i10.HourForecastEntity>);
  @override
  List<_i10.HourForecastEntity> get tomorrowWeather =>
      (super.noSuchMethod(Invocation.getter(#tomorrowWeather),
              returnValue: <_i10.HourForecastEntity>[])
          as List<_i10.HourForecastEntity>);
  @override
  List<Object?> get props =>
      (super.noSuchMethod(Invocation.getter(#props), returnValue: <Object?>[])
          as List<Object?>);
}
