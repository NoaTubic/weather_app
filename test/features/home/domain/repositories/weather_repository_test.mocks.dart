// Mocks generated by Mockito 5.1.0 from annotations
// in weather_app/test/features/home/domain/repositories/weather_repository_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i6;

import 'package:dio/src/dio_error.dart' as _i8;
import 'package:dio/src/options.dart' as _i4;
import 'package:dio/src/response.dart' as _i9;
import 'package:mockito/mockito.dart' as _i1;
import 'package:weather_app/features/home/data/data_source/local/local_data_source.dart'
    as _i5;
import 'package:weather_app/features/home/data/data_source/remote/remote_data_source.dart'
    as _i7;
import 'package:weather_app/features/home/data/models/responses/weather_data_model.dart'
    as _i2;
import 'package:weather_app/features/home/data/models/responses/weather_response/weather_response.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeWeatherDataModel_0 extends _i1.Fake implements _i2.WeatherDataModel {
}

class _FakeWeatherResponse_1 extends _i1.Fake implements _i3.WeatherResponse {}

class _FakeRequestOptions_2 extends _i1.Fake implements _i4.RequestOptions {}

/// A class which mocks [LocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalDataSource extends _i1.Mock implements _i5.LocalDataSource {
  MockLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i2.WeatherDataModel> getWeatherData() =>
      (super.noSuchMethod(Invocation.method(#getWeatherData, []),
              returnValue:
                  Future<_i2.WeatherDataModel>.value(_FakeWeatherDataModel_0()))
          as _i6.Future<_i2.WeatherDataModel>);
  @override
  _i6.Future<void> saveWeatherData(_i2.WeatherDataModel? model) =>
      (super.noSuchMethod(Invocation.method(#saveWeatherData, [model]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
}

/// A class which mocks [RemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoteDataSource extends _i1.Mock implements _i7.RemoteDataSource {
  MockRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i3.WeatherResponse> getCurrentWeather() =>
      (super.noSuchMethod(Invocation.method(#getCurrentWeather, []),
              returnValue:
                  Future<_i3.WeatherResponse>.value(_FakeWeatherResponse_1()))
          as _i6.Future<_i3.WeatherResponse>);
  @override
  _i6.Future<_i3.WeatherResponse> getForecastWeather() =>
      (super.noSuchMethod(Invocation.method(#getForecastWeather, []),
              returnValue:
                  Future<_i3.WeatherResponse>.value(_FakeWeatherResponse_1()))
          as _i6.Future<_i3.WeatherResponse>);
}

/// A class which mocks [DioError].
///
/// See the documentation for Mockito's code generation for more information.
class MockDioError extends _i1.Mock implements _i8.DioError {
  MockDioError() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.RequestOptions get requestOptions =>
      (super.noSuchMethod(Invocation.getter(#requestOptions),
          returnValue: _FakeRequestOptions_2()) as _i4.RequestOptions);
  @override
  set requestOptions(_i4.RequestOptions? _requestOptions) =>
      super.noSuchMethod(Invocation.setter(#requestOptions, _requestOptions),
          returnValueForMissingStub: null);
  @override
  set response(_i9.Response<dynamic>? _response) =>
      super.noSuchMethod(Invocation.setter(#response, _response),
          returnValueForMissingStub: null);
  @override
  _i8.DioErrorType get type => (super.noSuchMethod(Invocation.getter(#type),
      returnValue: _i8.DioErrorType.connectTimeout) as _i8.DioErrorType);
  @override
  set type(_i8.DioErrorType? _type) =>
      super.noSuchMethod(Invocation.setter(#type, _type),
          returnValueForMissingStub: null);
  @override
  set error(dynamic _error) =>
      super.noSuchMethod(Invocation.setter(#error, _error),
          returnValueForMissingStub: null);
  @override
  set stackTrace(StackTrace? stack) =>
      super.noSuchMethod(Invocation.setter(#stackTrace, stack),
          returnValueForMissingStub: null);
  @override
  String get message =>
      (super.noSuchMethod(Invocation.getter(#message), returnValue: '')
          as String);
}

/// A class which mocks [Exception].
///
/// See the documentation for Mockito's code generation for more information.
class MockException extends _i1.Mock implements Exception {
  MockException() {
    _i1.throwOnMissingStub(this);
  }
}
