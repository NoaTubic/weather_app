// Mocks generated by Mockito 5.1.0 from annotations
// in weather_app/test/features/search/domain/repositories/search_repository_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:dio/dio.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:weather_app/core/data/api/api_client.dart' as _i4;
import 'package:weather_app/features/home/data/models/responses/weather_response/weather_response.dart'
    as _i2;
import 'package:weather_app/features/search/data/models/search_model.dart'
    as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeWeatherResponse_0 extends _i1.Fake implements _i2.WeatherResponse {}

class _FakeRequestOptions_1 extends _i1.Fake implements _i3.RequestOptions {}

/// A class which mocks [ApiClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockApiClient extends _i1.Mock implements _i4.ApiClient {
  MockApiClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.WeatherResponse> getRealtimeWeather() =>
      (super.noSuchMethod(Invocation.method(#getRealtimeWeather, []),
              returnValue:
                  Future<_i2.WeatherResponse>.value(_FakeWeatherResponse_0()))
          as _i5.Future<_i2.WeatherResponse>);
  @override
  _i5.Future<_i2.WeatherResponse> getForecastWeather({int? days = 3}) => (super
          .noSuchMethod(
              Invocation.method(#getForecastWeather, [], {#days: days}),
              returnValue:
                  Future<_i2.WeatherResponse>.value(_FakeWeatherResponse_0()))
      as _i5.Future<_i2.WeatherResponse>);
  @override
  _i5.Future<List<_i6.SearchModel>> searchCity({String? query}) =>
      (super.noSuchMethod(Invocation.method(#searchCity, [], {#query: query}),
              returnValue:
                  Future<List<_i6.SearchModel>>.value(<_i6.SearchModel>[]))
          as _i5.Future<List<_i6.SearchModel>>);
}

/// A class which mocks [SearchModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockSearchModel extends _i1.Mock implements _i6.SearchModel {
  MockSearchModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get name =>
      (super.noSuchMethod(Invocation.getter(#name), returnValue: '') as String);
  @override
  String get region =>
      (super.noSuchMethod(Invocation.getter(#region), returnValue: '')
          as String);
  @override
  String get country =>
      (super.noSuchMethod(Invocation.getter(#country), returnValue: '')
          as String);
  @override
  Map<String, dynamic> toJson() =>
      (super.noSuchMethod(Invocation.method(#toJson, []),
          returnValue: <String, dynamic>{}) as Map<String, dynamic>);
}

/// A class which mocks [DioError].
///
/// See the documentation for Mockito's code generation for more information.
class MockDioError extends _i1.Mock implements _i3.DioError {
  MockDioError() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.RequestOptions get requestOptions =>
      (super.noSuchMethod(Invocation.getter(#requestOptions),
          returnValue: _FakeRequestOptions_1()) as _i3.RequestOptions);
  @override
  set requestOptions(_i3.RequestOptions? _requestOptions) =>
      super.noSuchMethod(Invocation.setter(#requestOptions, _requestOptions),
          returnValueForMissingStub: null);
  @override
  set response(_i3.Response<dynamic>? _response) =>
      super.noSuchMethod(Invocation.setter(#response, _response),
          returnValueForMissingStub: null);
  @override
  _i3.DioErrorType get type => (super.noSuchMethod(Invocation.getter(#type),
      returnValue: _i3.DioErrorType.connectTimeout) as _i3.DioErrorType);
  @override
  set type(_i3.DioErrorType? _type) =>
      super.noSuchMethod(Invocation.setter(#type, _type),
          returnValueForMissingStub: null);
  @override
  set error(dynamic _error) =>
      super.noSuchMethod(Invocation.setter(#error, _error),
          returnValueForMissingStub: null);
  @override
  set stackTrace(StackTrace? stack) =>
      super.noSuchMethod(Invocation.setter(#stackTrace, stack),
          returnValueForMissingStub: null);
  @override
  String get message =>
      (super.noSuchMethod(Invocation.getter(#message), returnValue: '')
          as String);
}

/// A class which mocks [Exception].
///
/// See the documentation for Mockito's code generation for more information.
class MockException extends _i1.Mock implements Exception {
  MockException() {
    _i1.throwOnMissingStub(this);
  }
}
