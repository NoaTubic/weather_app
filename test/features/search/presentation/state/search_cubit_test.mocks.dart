// Mocks generated by Mockito 5.1.0 from annotations
// in weather_app/test/features/search/presentation/state/search_cubit_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:weather_app/domain/failure/failure.dart' as _i6;
import 'package:weather_app/features/global/services/location_service.dart'
    as _i8;
import 'package:weather_app/features/search/domain/entities/search_entity.dart'
    as _i7;
import 'package:weather_app/features/search/domain/repositories/search_repository.dart'
    as _i2;
import 'package:weather_app/features/search/domain/use_cases/search_city_use_case.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeSearchRepository_0 extends _i1.Fake implements _i2.SearchRepository {
}

class _FakeEither_1<L, R> extends _i1.Fake implements _i3.Either<L, R> {}

/// A class which mocks [SearchCityUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSearchCityUseCase extends _i1.Mock implements _i4.SearchCityUseCase {
  MockSearchCityUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.SearchRepository get searchRepository =>
      (super.noSuchMethod(Invocation.getter(#searchRepository),
          returnValue: _FakeSearchRepository_0()) as _i2.SearchRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i7.SearchEntity>>> call(
          String? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
              returnValue:
                  Future<_i3.Either<_i6.Failure, List<_i7.SearchEntity>>>.value(
                      _FakeEither_1<_i6.Failure, List<_i7.SearchEntity>>()))
          as _i5.Future<_i3.Either<_i6.Failure, List<_i7.SearchEntity>>>);
}

/// A class which mocks [SearchEntity].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockSearchEntity extends _i1.Mock implements _i7.SearchEntity {
  MockSearchEntity() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get name =>
      (super.noSuchMethod(Invocation.getter(#name), returnValue: '') as String);
  @override
  String get region =>
      (super.noSuchMethod(Invocation.getter(#region), returnValue: '')
          as String);
  @override
  String get country =>
      (super.noSuchMethod(Invocation.getter(#country), returnValue: '')
          as String);
  @override
  String get fullName =>
      (super.noSuchMethod(Invocation.getter(#fullName), returnValue: '')
          as String);
  @override
  List<Object?> get props =>
      (super.noSuchMethod(Invocation.getter(#props), returnValue: <Object?>[])
          as List<Object?>);
}

/// A class which mocks [LocationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocationService extends _i1.Mock implements _i8.LocationService {
  MockLocationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void updateCurrentLocation(String? name) =>
      super.noSuchMethod(Invocation.method(#updateCurrentLocation, [name]),
          returnValueForMissingStub: null);
  @override
  _i5.Future<String> getCurrentLocation() =>
      (super.noSuchMethod(Invocation.method(#getCurrentLocation, []),
          returnValue: Future<String>.value('')) as _i5.Future<String>);
  @override
  bool isAlreadyReseted() =>
      (super.noSuchMethod(Invocation.method(#isAlreadyReseted, []),
          returnValue: false) as bool);
}
